// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           UserRole @default(USER)
  phone          String?

  tokens   Token[]
  sessions Session[]
  cars     Car[]
  orders   Order[]
}

enum UserRole {
  USER
  ADMIN
  EMPLOYEE
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Car {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plate     String
  model     String

  user   User    @relation(fields: [userId], references: [id])
  userId Int
  orders Order[]
}

model Order {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    OrderStatus @default(ONGOING)

  car       Car     @relation(fields: [carId], references: [id])
  carId     Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int
}

enum OrderStatus {
  ONGOING
  READY
  NOTIFIED
  COMPLETED
}

model Service {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String?
  status      ServiceStatus @default(ACTIVE)
  price       Int?

  orders Order[]
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}
